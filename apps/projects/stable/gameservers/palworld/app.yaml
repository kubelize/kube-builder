apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: palserver
  namespace: argocd
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: palworld
  source:
    repoURL: https://kubelize.github.io/game-servers/
    targetRevision: 0.1.3
    chart: palserver
    helm:
      parameters: []
      values: |
        # Default values for palserver.
        # This is a YAML-formatted file.
        # Declare variables to be passed into your templates.

        replicaCount: 1

        image:
          repository: kubelize/palworld-server
          pullPolicy: IfNotPresent
          # Overrides the image tag whose default is the chart appVersion.
          tag: "0.0.1"

        imagePullSecrets: []
        nameOverride: ""
        fullnameOverride: ""

        serviceAccount:
          # Specifies whether a service account should be created
          create: true
          # Automatically mount a ServiceAccount's API credentials?
          automount: true
          # Annotations to add to the service account
          annotations: {}
          # The name of the service account to use.
          # If not set and create is true, a name is generated using the fullname template
          name: ""

        podAnnotations: {}
        podLabels: {}

        podSecurityContext: {}
          # fsGroup: 2000

        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault

        service:
          type: LoadBalancer
          gameport: 8211

        storage:
          name: "palworld-data"
          accessMode: ""
          storageClassName: "mayastor-3"
          capacity: "40Gi"
          annotations: {}

        resources:
          # We usually recommend not to specify default resources and to leave this as a conscious
          # choice for the user. This also increases chances charts run on environments with little
          # resources, such as Minikube. If you do want to specify resources, uncomment the following
          # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          limits:
            cpu: 4000m
            memory: 16384Mi
          requests:
            cpu: 2000m
            memory: 8192Mi

        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 100
          targetCPUUtilizationPercentage: 80
          # targetMemoryUtilizationPercentage: 80

        # Additional volumes on the output Deployment definition.
        volumes:
          - name: data
            persistentVolumeClaim:
              claimName: palworld-data
        # - name: foo
        #   secret:
        #     secretName: mysecret
        #     optional: false

        # Additional volumeMounts on the output Deployment definition.
        volumeMounts: []
        # - name: foo
        #   mountPath: "/etc/foo"
        #   readOnly: true

        nodeSelector: {}

        tolerations: []

        affinity: {}