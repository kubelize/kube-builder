apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dbot-marcus
  namespace: argocd
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: dbot-marcus
  source:
    repoURL: https://kubelize.github.io/helm-charts/
    targetRevision: 0.1.0
    chart: dbot-marcus
    helm:
      parameters: []
      values: |
        dbot-marcus:
            replicaCount: 1
            image:
              repository: kubelize/dbot-marcus
              pullPolicy: IfNotPresent
              # Overrides the image tag whose default is the chart appVersion.
              tag: "0.1.2"
            imagePullSecrets: []
            nameOverride: ""
            fullnameOverride: ""
            serviceAccount:
              # Specifies whether a service account should be created
              create: true
              # Annotations to add to the service account
              annotations: {}
              # The name of the service account to use.
              # If not set and create is true, a name is generated using the fullname template
              name: ""
            podAnnotations: {}
            podSecurityContext: {}
              # fsGroup: 2000
            securityContext: {}
              # capabilities:
              #   drop:
              #   - ALL
              # readOnlyRootFilesystem: true
              # runAsNonRoot: true
              # runAsUser: 1000
            resources: {}
              # We usually recommend not to specify default resources and to leave this as a conscious
              # choice for the user. This also increases chances charts run on environments with little
              # resources, such as Minikube. If you do want to specify resources, uncomment the following
              # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              # limits:
              #   cpu: 100m
              #   memory: 128Mi
              # requests:
              #   cpu: 100m
              #   memory: 128Mi
            autoscaling:
              enabled: false
              minReplicas: 1
              maxReplicas: 100
              targetCPUUtilizationPercentage: 80
              # targetMemoryUtilizationPercentage: 80
            nodeSelector: {}
            tolerations: []
            affinity: {}